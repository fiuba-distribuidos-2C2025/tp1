package joiner

import (
	"strings"

	"github.com/fiuba-distribuidos-2C2025/tp1/middleware"
)

// Sample transaction received:
// storeId,birthdate,purchaseQty
// 1,1990-01-01,10
func concatBirthdatesWithStoresData(transaction string, storesData map[string]string) (string, bool) {
	elements := strings.Split(transaction, ",")
	if len(elements) < 3 {
		return "", false
	}
	storeId := elements[0]
	birthdate := elements[1]
	purchaseQty := elements[2]

	storeName, exists := storesData[storeId]
	if !exists {
		return "", false
	}

	var sb strings.Builder
	sb.WriteString(storeName)
	sb.WriteByte(',')
	sb.WriteString(birthdate)
	sb.WriteByte(',')
	sb.WriteString(purchaseQty)

	return sb.String(), true
}

func CreateByStoreIdJoinerCallbackWithOutput(outChan chan string, neededEof int, storeIdRows string) func(consumeChannel middleware.ConsumeChannel, done chan error) {
	eofCount := 0
	processedStores := ProcessStoreIds(storeIdRows)
	return func(consumeChannel middleware.ConsumeChannel, done chan error) {
		log.Infof("Waiting for messages...")

		var outBuilder strings.Builder

		for {
			select {
			case msg, ok := <-*consumeChannel:
				log.Infof("MESSAGE RECEIVED")
				msg.Ack(false)
				if !ok {
					log.Infof("Deliveries channel closed; shutting down")
					return
				}
				body := strings.TrimSpace(string(msg.Body))

				if body == "EOF" {
					eofCount++
					if eofCount >= neededEof {
						outChan <- "EOF"
						continue
					}
				}

				// Reset builder for reuse
				transactions := splitBatchInRows(body)
				outBuilder.Reset()

				for _, transaction := range transactions {
					if concatenated, ok := concatBirthdatesWithStoresData(transaction, processedStores); ok {
						outBuilder.WriteString(concatenated)
						outBuilder.WriteByte('\n')
					}
				}

				if outBuilder.Len() > 0 {
					outChan <- outBuilder.String()
					log.Infof("Processed message")
				}
			}
		}
	}
}
